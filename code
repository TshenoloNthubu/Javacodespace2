// Customer.java
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class Customer {
    private String customerId;
    private String firstname;
    private String surname;
    private String address;
    private List<Account> accounts;

    public Customer(String firstname, String surname, String address) {
        this.customerId = generateId();
        this.firstname = firstname;
        this.surname = surname;
        this.address = address;
        this.accounts = new ArrayList<>();
    }

    private String generateId() {
        return "CUST" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }

    public void addAccount(Account account) {
        accounts.add(account);
    }

    // Getters and setters
    public String getCustomerId() { return customerId; }
    public String getFirstname() { return firstname; }
    public void setFirstname(String firstname) { this.firstname = firstname; }
    public String getSurname() { return surname; }
    public void setSurname(String surname) { this.surname = surname; }
    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }
    public List<Account> getAccounts() { return accounts; }
}

// Account.java (Abstract class)
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public abstract class Account {
    protected String accountNumber;
    protected double balance;
    protected String branch;
    protected Customer customer;
    protected List<Transaction> transactionHistory;

    public Account(Customer customer, String branch, double initialDeposit) {
        this.customer = customer;
        this.branch = branch;
        this.balance = initialDeposit;
        this.accountNumber = generateAccountNumber();
        this.transactionHistory = new ArrayList<>();
        
        // Record initial deposit
        if (initialDeposit > 0) {
            recordTransaction("OPENING_DEPOSIT", initialDeposit);
        }
    }

    protected String generateAccountNumber() {
        return "ACC" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            recordTransaction("DEPOSIT", amount);
            System.out.println("Successfully deposited BWP " + amount + " into account " + accountNumber);
        } else {
            System.out.println("Invalid deposit amount: BWP " + amount);
        }
    }

    public abstract void withdraw(double amount);
    public abstract double calculateInterest();

    protected void recordTransaction(String type, double amount) {
        Transaction transaction = new Transaction(type, amount, this.balance);
        transactionHistory.add(transaction);
    }

    public void printTransactionHistory() {
        System.out.println("\nTransaction History for Account: " + accountNumber);
        System.out.println("Type\t\tAmount\t\tBalance After");
        System.out.println("--------------------------------------------");
        for (Transaction transaction : transactionHistory) {
            System.out.printf("%s\t\tBWP %.2f\tBWP %.2f%n", 
                transaction.getType(), 
                transaction.getAmount(), 
                transaction.getBalanceAfter());
        }
    }

    // Getters
    public String getAccountNumber() { return accountNumber; }
    public double getBalance() { return balance; }
    public String getBranch() { return branch; }
    public Customer getCustomer() { return customer; }
    public List<Transaction> getTransactionHistory() { return transactionHistory; }
}

// Transaction.java (New class for transaction history)
public class Transaction {
    private String transactionId;
    private String type;
    private double amount;
    private double balanceAfter;
    private String timestamp;

    public Transaction(String type, double amount, double balanceAfter) {
        this.transactionId = "TXN" + System.currentTimeMillis();
        this.type = type;
        this.amount = amount;
        this.balanceAfter = balanceAfter;
        this.timestamp = java.time.LocalDateTime.now().toString();
    }

    // Getters
    public String getTransactionId() { return transactionId; }
    public String getType() { return type; }
    public double getAmount() { return amount; }
    public double getBalanceAfter() { return balanceAfter; }
    public String getTimestamp() { return timestamp; }
}

// SavingsAccount.java
public class SavingsAccount extends Account {
    private static final double INTEREST_RATE = 0.0005; // 0.05% monthly
    private static final int MAX_MONTHLY_WITHDRAWALS = 5;
    private int withdrawalsThisMonth;

    public SavingsAccount(Customer customer, String branch, double initialDeposit) {
        super(customer, branch, initialDeposit);
        this.withdrawalsThisMonth = 0;
    }

    @Override
    public void withdraw(double amount) {
        if (withdrawalsThisMonth >= MAX_MONTHLY_WITHDRAWALS) {
            System.out.println("Withdrawal failed: Maximum monthly withdrawals (" + MAX_MONTHLY_WITHDRAWALS + ") reached");
            return;
        }
        
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            withdrawalsThisMonth++;
            recordTransaction("WITHDRAWAL", amount);
            System.out.println("Successfully withdrew BWP " + amount + " from savings account " + accountNumber);
        } else if (amount > balance) {
            System.out.println("Withdrawal failed: Insufficient funds. Available: BWP " + balance);
        } else {
            System.out.println("Withdrawal failed: Invalid amount: BWP " + amount);
        }
    }

    @Override
    public double calculateInterest() {
        return balance * INTEREST_RATE;
    }

    public void applyMonthlyInterest() {
        double interest = calculateInterest();
        if (interest > 0) {
            balance += interest;
            recordTransaction("INTEREST", interest);
            System.out.println("Monthly interest of BWP " + interest + " applied to account " + accountNumber);
        }
        resetMonthlyWithdrawals();
    }

    private void resetMonthlyWithdrawals() {
        withdrawalsThisMonth = 0;
    }

    public int getWithdrawalsThisMonth() { return withdrawalsThisMonth; }
    public int getRemainingWithdrawals() { return MAX_MONTHLY_WITHDRAWALS - withdrawalsThisMonth; }
}

// InvestmentAccount.java
public class InvestmentAccount extends Account {
    private static final double INTEREST_RATE = 0.05; // 5% monthly
    private static final double MIN_OPENING_BALANCE = 500.00;

    public InvestmentAccount(Customer customer, String branch, double initialDeposit) {
        super(customer, branch, initialDeposit);
        if (initialDeposit < MIN_OPENING_BALANCE) {
            throw new IllegalArgumentException("Minimum opening balance for Investment Account is BWP " + MIN_OPENING_BALANCE);
        }
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            recordTransaction("WITHDRAWAL", amount);
            System.out.println("Successfully withdrew BWP " + amount + " from investment account " + accountNumber);
        } else if (amount > balance) {
            System.out.println("Withdrawal failed: Insufficient funds. Available: BWP " + balance);
        } else {
            System.out.println("Withdrawal failed: Invalid amount: BWP " + amount);
        }
    }

    @Override
    public double calculateInterest() {
        return balance * INTEREST_RATE;
    }

    public void applyMonthlyInterest() {
        double interest = calculateInterest();
        if (interest > 0) {
            balance += interest;
            recordTransaction("INTEREST", interest);
            System.out.println("Monthly interest of BWP " + interest + " applied to investment account " + accountNumber);
        }
    }
}

// ChequeAccount.java
public class ChequeAccount extends Account {
    private String employerName;
    private double monthlyIncome;

    public ChequeAccount(Customer customer, String branch, double initialDeposit,
                        String employerName, double monthlyIncome) {
        super(customer, branch, initialDeposit);
        this.employerName = employerName;
        this.monthlyIncome = monthlyIncome;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            recordTransaction("WITHDRAWAL", amount);
            System.out.println("Successfully withdrew BWP " + amount + " from cheque account " + accountNumber);
        } else if (amount > balance) {
            System.out.println("Withdrawal failed: Insufficient funds. Available: BWP " + balance);
        } else {
            System.out.println("Withdrawal failed: Invalid amount: BWP " + amount);
        }
    }

    @Override
    public double calculateInterest() {
        return 0; // No interest on cheque accounts
    }

    // Getters and setters for employment info
    public String getEmployerName() { return employerName; }
    public void setEmployerName(String employerName) { this.employerName = employerName; }
    public double getMonthlyIncome() { return monthlyIncome; }
    public void setMonthlyIncome(double monthlyIncome) { this.monthlyIncome = monthlyIncome; }
}

// BankingSystemDemo.java (Main class to test the system)
public class BankingSystemDemo {
    public static void main(String[] args) {
        System.out.println("=== BANKING SYSTEM DEMONSTRATION ===\n");
        
        // Create a customer
        Customer customer1 = new Customer("John", "Doe", "123 Main St, Gaborone");
        System.out.println("Created customer: " + customer1.getFirstname() + " " + customer1.getSurname());
        System.out.println("Customer ID: " + customer1.getCustomerId() + "\n");
        
        // Create different types of accounts
        SavingsAccount savings = new SavingsAccount(customer1, "Main Branch", 1000.00);
        ChequeAccount cheque = new ChequeAccount(customer1, "Main Branch", 2000.00, "Botswana Corp", 5000.00);
        
        // Add accounts to customer
        customer1.addAccount(savings);
        customer1.addAccount(cheque);
        
        // Test savings account operations
        System.out.println("=== SAVINGS ACCOUNT OPERATIONS ===");
        System.out.println("Account: " + savings.getAccountNumber());
        System.out.println("Initial Balance: BWP " + savings.getBalance());
        
        savings.deposit(500.00);
        savings.withdraw(200.00);
        savings.withdraw(100.00);
        savings.withdraw(50.00);
        savings.withdraw(25.00);
        savings.withdraw(10.00); // This should work (5th withdrawal)
        savings.withdraw(5.00);  // This should fail (6th withdrawal - over limit)
        
        System.out.println("Remaining withdrawals this month: " + savings.getRemainingWithdrawals());
        System.out.println("Final Balance: BWP " + savings.getBalance() + "\n");
        
        // Test cheque account operations
        System.out.println("=== CHEQUE ACCOUNT OPERATIONS ===");
        System.out.println("Account: " + cheque.getAccountNumber());
        System.out.println("Initial Balance: BWP " + cheque.getBalance());
        System.out.println("Employer: " + cheque.getEmployerName());
        System.out.println("Monthly Income: BWP " + cheque.getMonthlyIncome());
        
        cheque.deposit(1000.00);
        cheque.withdraw(500.00);
        cheque.withdraw(2000.00); // This should fail - insufficient funds
        System.out.println("Final Balance: BWP " + cheque.getBalance() + "\n");
        
        // Test investment account
        System.out.println("=== INVESTMENT ACCOUNT OPERATIONS ===");
        try {
            InvestmentAccount investment = new InvestmentAccount(customer1, "Main Branch", 600.00);
            customer1.addAccount(investment);
            System.out.println("Account: " + investment.getAccountNumber());
            System.out.println("Initial Balance: BWP " + investment.getBalance());
            
            investment.deposit(400.00);
            investment.applyMonthlyInterest(); // Apply 5% monthly interest
            System.out.println("Balance after interest: BWP " + investment.getBalance());
        } catch (IllegalArgumentException e) {
            System.out.println("Error creating investment account: " + e.getMessage());
        }
        
        // Try to create investment account with insufficient funds
        try {
            InvestmentAccount investment2 = new InvestmentAccount(customer1, "Main Branch", 400.00);
        } catch (IllegalArgumentException e) {
            System.out.println("Expected error: " + e.getMessage());
        }
        
        // Display transaction history
        System.out.println("\n=== TRANSACTION HISTORY ===");
        savings.printTransactionHistory();
        cheque.printTransactionHistory();
        
        // Display customer portfolio
        System.out.println("\n=== CUSTOMER PORTFOLIO SUMMARY ===");
        System.out.println("Customer: " + customer1.getFirstname() + " " + customer1.getSurname());
        System.out.println("Total Accounts: " + customer1.getAccounts().size());
        double totalBalance = 0;
        for (Account account : customer1.getAccounts()) {
            System.out.println(" - " + account.getClass().getSimpleName() + 
                             " (" + account.getAccountNumber() + "): BWP " + account.getBalance());
            totalBalance += account.getBalance();
        }
        System.out.println("Total Balance: BWP " + totalBalance);
        
        System.out.println("\n=== DEMONSTRATION COMPLETE ===");
    }
}
